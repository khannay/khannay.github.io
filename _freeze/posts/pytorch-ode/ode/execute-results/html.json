{
  "hash": "275fbccb1b84991df6e07fa73af360fe",
  "result": {
    "markdown": "---\ntitle: \"Differential Equations as a Pytorch Neural Network Layer\"\ndescription: |\n    \"A tutorial on how to use differential equations as a pytorch neural network layer. We will use the torchdiffeq library to solve the differential equations.\"\ndate: \"2023-04-08\"\ncategories:\n- deep learning\n- data science\n- differential equations\ncode-fold: true\nimage: /posts/pytorch-ode/lorenz_fit.png\ndraft: false\n---\n\n<a href=\"https://colab.research.google.com/github/khannay/paramfittorchdemo/blob/main/nbs/00_training.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n\n\n> How to use differential equations layers in pytorch\n\nDifferential equations are the mathematical foundation for most of modern science. They describe the state of a system using an equation for the rate of change (differential). It is remarkable how many systems can be well described by equations of this form. For example, the physical laws describing motion, electromagnetism and quantum mechanics all take this form. More broadly, differential equations describe chemical reaction rates through the law of mass action, neuronal firing and disease spread through the SIR model. \n\nThe deep learning revolution has brought with it a new set of tools for performing large scale optimizations over enormous datasets. In this post, we will see how you can use these tools to fit the parameters of a custom differential equation layer in pytorch. \n\n<a href=\"https://imgflip.com/i/7iqu3n\"><img src=\"https://i.imgflip.com/7iqu3n.jpg\" title=\"made at imgflip.com\"/></a><div><a href=\"https://imgflip.com/memegenerator\">from Imgflip Meme Generator</a></div>\n\n\n## What is the problem we are trying to solve? \n\nLet's say we have some time series data y(t) that we want to model with a differential equation. The data takes the form of a set of observations yᵢ at times tᵢ. Based on some domain knowledge of the underlying system we can write down a differential equation to approximate the system. \n\nIn the most general form this takes the form:\n\n$$\\begin{align}\n\\frac{dy}{dt} = f(y,t;\\theta)  \\\\\ny(t_0) = y_0 \n\\end{align}$$\n\nwhere $y$ is the state of the system, $t$ is time, and $\\theta$ are the parameters of the model. In this post we will assume that the parameters $\\theta$ are unknown and we want to learn them from the data. \n\n\nLet's import the libraries we will need for this post. The only non standard machine learning library we will use the <a href=\"https://github.com/rtqichen/torchdiffeq\"> torchdiffeq </a> library to solve the differential equations. This library implements numerical differential equation solvers in pytorch. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport torch \nimport torch.nn as nn\nfrom torchdiffeq import odeint as odeint\nimport pylab as plt\nfrom torch.utils.data import Dataset, DataLoader\nfrom typing import Callable, List, Tuple, Union, Optional\nfrom pathlib import Path  \n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nif torch.cuda.is_available():\n    device = torch.device('cuda')\nelse:\n    device = torch.device('cpu')\n```\n:::\n\n\n## Models\n\nThe first step of our modeling process is to define the model. For differential equations this means we must choose a form for the function $f(y,t;\\theta)$ and a way to represent the parameters $\\theta$. We also need to do this in a way that is compatible with pytorch. \n\nThis means we need to encode our function as a torch.nn.Module class. As you will see this is pretty easy and only requires defining two methods. Lets get started with the first of out three example models. \n\n### van Der Pol Oscillator (VDP)\n\nWe can define a differential equation system using the <i> torch.nn.Module </i>  class where the parameters are created using the <i> torch.nn.Parameter </i>\ndeclaration. This lets pytorch know that we want to accumulate gradients for those parameters. We can also include fixed parameters (don't want to fit these) by just not wrapping them with this declaration. \n\nThe first example we will use is the classic VDP oscillator which is a nonlinear oscillator with a single parameter $\\mu$. The differential equations for this system are:\n\n$$\\begin{align}\n\\frac{dX}{dt} &= \\mu(x-\\frac{1}{3}x^3-y)  \\\\\n\\frac{dY}{dt} &= \\frac{x}{\\mu}  \\\\\n\\end{align}$$\n\nwhere $X$ and $Y$ are the state variables. The VDP model is used to model everything from electronic circuits to cardiac arrhythmias and circadian rhythms. We can define this system in pytorch as follows:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass VDP(nn.Module):\n    \"\"\" \n    Define the Van der Pol oscillator as a PyTorch module.\n    \"\"\"\n    def __init__(self, \n                 mu: float, # Stiffness parameter of the VDP oscillator\n                 ):\n        super().__init__() \n        self.mu = torch.nn.Parameter(torch.tensor(mu)) # make mu a learnable parameter\n        \n    def forward(self, \n                t: float, # time index\n                state: torch.TensorType, # state of the system first dimension is the batch size\n                ) -> torch.Tensor: # return the derivative of the state\n        \"\"\" \n            Define the right hand side of the VDP oscillator.\n        \"\"\"\n        x = state[..., 0] # first dimension is the batch size\n        y = state[..., 1]\n        dX = self.mu*(x-1/3*x**3 - y)\n        dY = 1/self.mu*x\n        # trick to make sure our return value has the same shape as the input\n        dfunc = torch.zeros_like(state) \n        dfunc[..., 0] = dX\n        dfunc[..., 1] = dY\n        return dfunc\n    \n    def __repr__(self):\n        \"\"\"Print the parameters of the model.\"\"\"\n        return f\" mu: {self.mu.item()}\"\n\n```\n:::\n\n\nYou only need to define the dunder init method (__init__) and the forward method. I added a string method __repr__ to pretty print the parameter. The key point here is how we can translate from the differential equation to torch code in the forward method. This method needs to define the right-hand side of the differential equation. \n\nLet's see how we can integrate this model using the odeint method from torchdiffeq:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nvdp_model = VDP(mu=0.5)\n\n# Create a time vector, this is the time axis of the ODE\nts = torch.linspace(0,30.0,1000)\n# Create a batch of initial conditions \nbatch_size = 30\n# Creates some random initial conditions\ninitial_conditions = torch.tensor([0.01, 0.01]) + 0.2*torch.randn((batch_size,2))\n\n# Solve the ODE, odeint comes from torchdiffeq\nsol = odeint(vdp_model, initial_conditions, ts, method='dopri5').detach().numpy()\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nplt.plot(ts, sol[:,:,0], lw=0.5);\nplt.title(\"Time series of the VDP oscillator\");\nplt.xlabel(\"time\");\nplt.ylabel(\"x\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-6-output-1.png){width=600 height=449}\n:::\n:::\n\n\nHere is a phase plane plot of the solution (a phase plane plot of a parametric plot of the dynamical state). \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Check the solution\nplt.plot(sol[:,:,0], sol[:,:,1], lw=0.5);\nplt.title(\"Phase plot of the VDP oscillator\");\nplt.xlabel(\"x\");\nplt.ylabel(\"y\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-7-output-1.png){width=587 height=449}\n:::\n:::\n\n\nThe colors indicate the 30 seperate trajectories in our batch. The solution comes back as a torch tensor with dimensions (time_points, batch number, dynamical_dimension). \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsol.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(1000, 30, 2)\n```\n:::\n:::\n\n\n### Lotka Volterra Predator Prey equations \n\nAs another example we create a module for the Lotka Volterra predator-prey equations. In the Lotka-Volterra (LV) predator-prey model, there are two primary variables: the population of prey ($x$) and the population of predators ($y$). The model is defined by the following equations:\n\n$$\\begin{align}\n\\frac{dx}{dt} &= \\alpha x - \\beta xy \\\\\n\\frac{dy}{dt} &= -\\delta y + \\gamma xy \\\\\n\\end{align}$$\n\nThe population of prey ($x$) represents the number of individuals of the prey species present in the ecosystem at any given time. The population of predators ($y$) represents the number of individuals of the predator species present in the ecosystem at any given time.\n\nIn addition to the primary variables, there are also four parameters that are used to describe various ecological factors in the model:\n\n$\\alpha$ represents the intrinsic growth rate of the prey population in the absence of predators.\n$\\beta$ represents the predation rate of the predators on the prey. \n$\\gamma$ represents the death rate of the predator population in the absence of prey.\n$\\delta$ represents the efficiency with which the predators convert the consumed prey into new predator biomass.\n\nTogether, these variables and parameters describe the dynamics of predator-prey interactions in an ecosystem and are used to mathematically model the changes in the populations of prey and predators over time.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nclass LotkaVolterra(nn.Module):\n    \"\"\" \n     The Lotka-Volterra equations are a pair of first-order, non-linear, differential equations\n     describing the dynamics of two species interacting in a predator-prey relationship.\n    \"\"\"\n    def __init__(self,\n                 alpha: float = 1.5, # The alpha parameter of the Lotka-Volterra system\n                 beta: float = 1.0, # The beta parameter of the Lotka-Volterra system\n                 delta: float = 3.0, # The delta parameter of the Lotka-Volterra system\n                 gamma: float = 1.0 # The gamma parameter of the Lotka-Volterra system\n                 ) -> None:\n        super().__init__()\n        self.model_params = torch.nn.Parameter(torch.tensor([alpha, beta, delta, gamma]))\n        \n        \n    def forward(self, t, state):\n        x = state[...,0]      #variables are part of vector array u \n        y = state[...,1]\n        sol = torch.zeros_like(state)\n        \n        #coefficients are part of tensor model_params\n        alpha, beta, delta, gamma = self.model_params    \n        sol[...,0] = alpha*x - beta*x*y\n        sol[...,1] = -delta*y + gamma*x*y\n        return sol\n    \n    def __repr__(self):\n        return f\" alpha: {self.model_params[0].item()}, \\\n            beta: {self.model_params[1].item()}, \\\n                delta: {self.model_params[2].item()}, \\\n                    gamma: {self.model_params[3].item()}\"\n```\n:::\n\n\nThis follows the same pattern as the first example, the main difference is that we now have four parameters and store them as a model_params tensor. Here is the integration and plotting code for the predator-prey equations. \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nlv_model = LotkaVolterra() #use default parameters\nts = torch.linspace(0,30.0,1000) \nbatch_size = 30\n# Create a batch of initial conditions (batch_dim, state_dim) as small perturbations around one value\ninitial_conditions = torch.tensor([[3,3]]) + 0.50*torch.randn((batch_size,2))\nsol = odeint(lv_model, initial_conditions, ts, method='dopri5').detach().numpy()\n# Check the solution\n\nplt.plot(ts, sol[:,:,0], lw=0.5);\nplt.title(\"Time series of the Lotka-Volterra system\");\nplt.xlabel(\"time\");\nplt.ylabel(\"x\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-10-output-1.png){width=576 height=449}\n:::\n:::\n\n\nNow a phase plane plot of the system:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplt.plot(sol[:,:,0], sol[:,:,1], lw=0.5);\nplt.title(\"Phase plot of the Lotka-Volterra system\");\nplt.xlabel(\"x\");\nplt.ylabel(\"y\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-11-output-1.png){width=576 height=449}\n:::\n:::\n\n\n### Lorenz system \n\nThe last example we will use is the Lorenz equations which are famous for their beatiful plots illustrating chaotic dynamics. They originally came from a reduced model for fluid dynamics and take the form:\n\n$$\\begin{align}\n\\frac{dx}{dt} &= \\sigma(y - x) \\\\\n\\frac{dy}{dt} &= x(\\rho - z) - y \\\\\n\\frac{dz}{dt} &= xy - \\beta z\n\\end{align}$$\n\nwhere $x$, $y$, and $z$ are the state variables, and $\\sigma$, $\\rho$, and $\\beta$ are the system parameters.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nclass Lorenz(nn.Module):\n    \"\"\" \n    Define the Lorenz system as a PyTorch module.\n    \"\"\"\n    def __init__(self, \n                 sigma: float =10.0, # The sigma parameter of the Lorenz system\n                 rho: float=28.0, # The rho parameter of the Lorenz system\n                beta: float=8.0/3, # The beta parameter of the Lorenz system\n                ):\n        super().__init__() \n        self.model_params = torch.nn.Parameter(torch.tensor([sigma, rho, beta]))\n        \n        \n    def forward(self, t, state):\n        x = state[...,0]      #variables are part of vector array u \n        y = state[...,1]\n        z = state[...,2]\n        sol = torch.zeros_like(state)\n        \n        sigma, rho, beta = self.model_params    #coefficients are part of vector array p\n        sol[...,0] = sigma*(y-x)\n        sol[...,1] = x*(rho-z) - y\n        sol[...,2] = x*y - beta*z\n        return sol\n    \n    def __repr__(self):\n        return f\" sigma: {self.model_params[0].item()}, \\\n            rho: {self.model_params[1].item()}, \\\n                beta: {self.model_params[2].item()}\"\n\n```\n:::\n\n\nThis shows how to integrate this system and plot the results. This system (at these parameter values) shows chaotic dynamics so initial conditions that start off close together diverge from one another exponentially. \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nlorenz_model = Lorenz()\nts = torch.linspace(0,50.0,3000)\nbatch_size = 30\n# Create a batch of initial conditions (batch_dim, state_dim) as small perturbations around one value\ninitial_conditions = torch.tensor([[1.0,0.0,0.0]]) + 0.10*torch.randn((batch_size,3))\nsol = odeint(lorenz_model, initial_conditions, ts, method='dopri5').detach().numpy()\n\n# Check the solution\nplt.plot(ts[:2000], sol[:2000,:,0], lw=0.5);\nplt.title(\"Time series of the Lorenz system\");\nplt.xlabel(\"time\");\nplt.ylabel(\"x\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-13-output-1.png){width=596 height=449}\n:::\n:::\n\n\nHere we show the famous butterfly plot (phase plane plot) for the first set of initial conditions in the batch. \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nplt.plot(sol[:,0,0], sol[:,0,1], color='black', lw=0.5);\nplt.title(\"Phase plot of the Lorenz system\");\nplt.xlabel(\"x\");\nplt.ylabel(\"y\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-14-output-1.png){width=596 height=449}\n:::\n:::\n\n\n## Data\n\nNow that we can define the differential equation models in pytorch we need to create some data to be used in training. This is where things start to get really neat as we see our first glimpse of being able to hijack deep learning machinery for fitting the parameters.  Really we could just use tensor of data directly, but this is a nice way to organize the data. It will also be useful if you have some experimental data that you want to use. \n\nTorch provides the <i> Dataset </i> class for loading in data. To use it you just need to create a subclass and define two methods. The  `__len__` function that returns the number of data points and a `__getitem__` function that returns the data point at a given index. If you are wondering these methods are what underly the `len(array)` and 'array[0]` subscript access in python lists. \n\nThe rest of boilerplate code needed in defined in the parent class `torch.utils.data.Dataset`. We will see the power of these method when we go to define a training loop. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nclass SimODEData(Dataset):\n    \"\"\" \n        A very simple dataset class for simulating ODEs\n    \"\"\"\n    def __init__(self,\n                 ts: List[torch.Tensor], # List of time points as tensors\n                 values: List[torch.Tensor], # List of dynamical state values (tensor) at each time point \n                 true_model: Union[torch.nn.Module,None] = None,\n                 ) -> None:\n        self.ts = ts \n        self.values = values \n        self.true_model = true_model\n        \n    def __len__(self) -> int:\n        return len(self.ts)\n    \n    def __getitem__(self, index: int) -> Tuple[torch.Tensor, torch.Tensor]:\n        return self.ts[index], self.values[index]\n\n```\n:::\n\n\nNext let's create a quick generator function to generate some simulated data to test the algorithms on. In a real use case the data would be loaded from a file or database, but for this example we will just generate some data. In fact, I recommend that you always start with generated data to make sure your code is working before you try to load real data. \n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndef create_sim_dataset(model: nn.Module, # model to simulate from\n                       ts: torch.Tensor, # Time points to simulate for\n                       num_samples: int = 10, # Number of samples to generate\n                       sigma_noise: float = 0.1, # Noise level to add to the data\n                       initial_conditions_default: torch.Tensor = torch.tensor([0.0, 0.0]), # Default initial conditions\n                       sigma_initial_conditions: float = 0.1, # Noise level to add to the initial conditions\n                       ) -> SimODEData:\n    ts_list = [] \n    states_list = [] \n    dim = initial_conditions_default.shape[0]\n    for i in range(num_samples):\n        x0 = sigma_initial_conditions * torch.randn((1,dim)).detach() + initial_conditions_default\n        ys = odeint(model, x0, ts).squeeze(1).detach() \n        ys += sigma_noise*torch.randn_like(ys)\n        ys[0,:] = x0 # Set the first value to the initial condition\n        ts_list.append(ts)\n        states_list.append(ys)\n    return SimODEData(ts_list, states_list, true_model=model)\n```\n:::\n\n\nThis just takes in a differential equation model with some initial states and generates some time-series data from it (and adds in some gaussian noise). This data is then passed into our custom dataset container. Let's define a couple of functions to visualize the model fits.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndef plot_time_series(true_model: torch.nn.Module, # true underlying model for the simulated data\n                     fit_model: torch.nn.Module, # model fit to the data\n                     data: SimODEData, # data set to plot (scatter)\n                     time_range: tuple = (0.0, 30.0), # range of times to simulate the models for\n                     ax: plt.Axes = None, \n                     dyn_var_idx: int = 0,\n                     title: str = \"Model fits\",\n                     *args,\n                     **kwargs) -> Tuple[plt.Figure, plt.Axes]:\n    \"\"\"\n    Plot the true model and fit model on the same axes.\n    \"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n    else:\n        fig = ax.get_figure()\n        \n    vdp_model = VDP(mu = 0.10) \n    ts = torch.linspace(time_range[0], time_range[1], 1000)\n    ts_data, y_data = data\n\n    initial_conditions = y_data[0, :].unsqueeze(0)\n    sol_pred = odeint(fit_model, initial_conditions, ts, method='dopri5').detach().numpy()\n    sol_true = odeint(true_model, initial_conditions, ts, method='dopri5').detach().numpy()\n        \n    ax.plot(ts, sol_pred[:,:,dyn_var_idx], color='skyblue', lw=2.0, label='Predicted', **kwargs);\n    ax.scatter(ts_data.detach(), y_data[:,dyn_var_idx].detach(), color='black', s=30, label='Data',  **kwargs);\n    ax.plot(ts, sol_true[:,:,dyn_var_idx], color='black', ls='--', lw=1.0, label='True model', **kwargs);\n    ax.set_title(title);\n    ax.set_xlabel(\"t\");\n    ax.set_ylabel(\"y\");\n    plt.legend();\n    return fig, ax\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndef plot_phase_plane(true_model: torch.nn.Module, # true underlying model for the simulated data\n                     fit_model: torch.nn.Module, # model fit to the data\n                     data: SimODEData, # data set to plot (scatter)\n                     time_range: tuple = (0.0, 30.0), # range of times to simulate the models for\n                     ax: plt.Axes = None, \n                     dyn_var_idx: tuple = (0,1),\n                     title: str = \"Model fits\",\n                     *args,\n                     **kwargs) -> Tuple[plt.Figure, plt.Axes]:\n    \"\"\"\n    Plot the true model and fit model on the same axes.\n    \"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n    else:\n        fig = ax.get_figure()\n        \n    ts = torch.linspace(time_range[0], time_range[1], 1000)\n    ts_data, y_data = data\n    \n    initial_conditions = y_data[0, :].unsqueeze(0)\n    sol_pred = odeint(fit_model, initial_conditions, ts, method='dopri5').detach().numpy()\n    sol_true = odeint(true_model, initial_conditions, ts, method='dopri5').detach().numpy()\n    \n    idx1, idx2 = dyn_var_idx\n    \n    ax.plot(sol_pred[:,:,idx1], sol_pred[:,:,idx2], color='skyblue', lw=1.0, label='Fit model');\n    ax.scatter(y_data[:,idx1], y_data[:,idx2].detach(), color='black', s=30, label='Data');\n    ax.plot(sol_true[:,:,idx1], sol_true[:,:,idx2], color='black', ls='--', lw=1.0, label='True model');\n    ax.set_xlabel(r'$x$')\n    ax.set_ylabel(r'$y$')\n    ax.set_title(title)\n    return fig, ax\n```\n:::\n\n\n## Training Loop\n\nNext we will create a wrapper function for a pytorch training loop. Training means we want to update the model parameters to increase the alignment with the data ( or decrease the misalignment). \n\nOne of the tricks for this from deep learning is to not use all the data before taking a gradient step. Part of this is necessity for using enormous datasets as you can't fit all of that data inside a GPU's memory, but this also can help the gradient descent algorithm avoid getting stuck in local minima.\n\nThe training loop in words: \n* Divide the dataset into mini-batches, these are subsets of your entire data set. Usually want to choose these randomly. \n* Iterate through the mini-batches, for each mini-batch:\n    * Generate the predictions using the current model parameters\n    * Calculate the loss (here we will use the mean squared error)\n    * Calculate the gradients, using backpropagation.  \n    * Update the parameters using a gradient descent step. Here we use the Adam optimizer.\n* Each full pass through the dataset is called an epoch. \n\nOkay here is the code:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndef train(model: torch.nn.Module, # Model to train\n          data: SimODEData, # Data to train on\n          lr: float = 1e-2, # learning rate for the Adam optimizer\n          epochs: int = 10, # Number of epochs to train for\n          batch_size: int = 5, # Batch size for training\n          method = 'rk4', # ODE solver to use\n          step_size: float = 0.10, # for fixed diffeq solver set the step size\n          show_every: int = 10, # How often to print the loss function message\n          save_plots_every: Union[int,None] = None, # save a plot of the fit, to disable make this None\n          model_name: str = \"\", #string for the model, used to reference the saved plots \n          *args: tuple, \n          **kwargs: dict\n          ):\n    \n    # Create a data loader to iterate over the data. This takes in our dataset and returns batches of data\n    trainloader = DataLoader(data, batch_size=batch_size, shuffle=True)\n    # Choose an optimizer. Adam is a good default choice as a fancy gradient descent\n    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n    # Create a loss function this computes the error between the predicted and true values\n    criterion = torch.nn.MSELoss() \n    \n    for epoch in range(epochs):\n        running_loss = 0.0 \n        for batchdata in trainloader:\n            optimizer.zero_grad() # reset gradients, famous gotcha in a pytorch training loop\n            ts, states = batchdata # unpack the data \n            initial_state = states[:,0,:] # grab the initial state\n            # Make the prediction and then flip the dimensions to be (batch, state_dim, time)\n            # Pytorch expects the batch dimension to be first\n            pred = odeint(model, initial_state, ts[0], method=method, options={'step_size': step_size}).transpose(0,1) \n            # Compute the loss\n            loss = criterion(pred, states)\n            # compute gradients\n            loss.backward() \n            # update parameters\n            optimizer.step() \n            running_loss += loss.item() # record loss\n        if epoch % show_every == 0:\n            print(f\"Loss at {epoch}: {running_loss}\")\n        # Use this to save plots of the fit every save_plots_every epochs\n        if save_plots_every is not None and epoch % save_plots_every == 0:\n            with torch.no_grad():\n                fig, ax = plot_time_series(data.true_model, model, data[0])\n                ax.set_title(f\"Epoch: {epoch}\")\n                fig.savefig(f\"./tmp_plots/{epoch}_{model_name}_fit_plot\")\n                plt.close()\n```\n:::\n\n\n## Examples\n\n### Fitting the VDP Oscillator\n\nLet's use this training loop to recover the parameters from simulated VDP oscillator data.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntrue_mu = 0.30\nmodel_sim = VDP(mu=true_mu)\nts_data = torch.linspace(0.0,10.0,10) \ndata_vdp = create_sim_dataset(model_sim, \n                              ts = ts_data, \n                              num_samples=10, \n                              sigma_noise=0.01)\n```\n:::\n\n\nLet's create a model with the wrong parameter value and visualize the starting point.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nvdp_model = VDP(mu = 0.10) \nplot_time_series(model_sim, \n                 vdp_model, \n                 data_vdp[0], \n                 dyn_var_idx=1, \n                 title = \"VDP Model: Before Parameter Fits\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-21-output-1.png){width=587 height=449}\n:::\n:::\n\n\nNow, we will use the training loop to fit the parameters of the VDP oscillator to the simulated data. \n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntrain(vdp_model, data_vdp, epochs=50, model_name=\"vdp\");\nprint(f\"After training: {vdp_model}, where the true value is {true_mu}\")\nprint(f\"Final Parameter Recovery Error: {vdp_model.mu - true_mu}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLoss at 0: 0.10926538333296776\nLoss at 10: 0.006012062542140484\nLoss at 20: 0.0006721354293404147\nLoss at 30: 0.00015192844875855371\nLoss at 40: 0.00015799533139215782\nAfter training:  mu: 0.30115044116973877, where the true value is 0.3\nFinal Parameter Recovery Error: 0.0011504292488098145\n```\n:::\n:::\n\n\nNot to bad! Let's see how the plot looks now...\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nplot_time_series(model_sim, vdp_model, data_vdp[0], dyn_var_idx=1, title = \"VDP Model: Before Parameter Fits\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-23-output-1.png){width=587 height=449}\n:::\n:::\n\n\nThe plot confirms that we almost perfectly recovered the parameter. One more quick plot, where we plot the dynamics of the system in the phase plane (a parametric plot of the state variables). \n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nplot_phase_plane(model_sim, vdp_model, data_vdp[0], title = \"VDP Model: After Fitting\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-24-output-1.png){width=593 height=449}\n:::\n:::\n\n\n@fig-vdp-fit shows the results of the fit.\n\n![Model fitting for a VDP equation model](./img/vdp.gif){#fig-vdp-fit}\n\n\n### Lotka Voltera Equations \n\nNow lets adapt our methods to fit simulated data from the Lotka Voltera equations. \n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nmodel_sim_lv = LotkaVolterra(1.5,1.0,3.0,1.0)\nts_data = torch.arange(0.0, 10.0, 0.1)\ndata_lv = create_sim_dataset(model_sim_lv, \n                              ts = ts_data, \n                              num_samples=10, \n                              sigma_noise=0.1,\n                              initial_conditions_default=torch.tensor([2.5, 2.5]))\n```\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nmodel_lv = LotkaVolterra(alpha=1.6, beta=1.1,delta=2.7, gamma=1.2) \n\nplot_time_series(model_sim_lv, model_lv, data = data_lv[0], title = \"Lotka Volterra: Before Fitting\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-26-output-1.png){width=589 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ntrain(model_lv, data_lv, epochs=60, lr=1e-2, model_name=\"lotkavolterra\")\nprint(f\"Fitted model: {model_lv}\")\nprint(f\"True model: {model_sim_lv}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLoss at 0: 1.1349026560783386\nLoss at 10: 0.12011899054050446\nLoss at 20: 0.04819396138191223\nLoss at 30: 0.023500457406044006\nLoss at 40: 0.021485709585249424\nLoss at 50: 0.021347378380596638\nFitted model:  alpha: 1.598427414894104,             beta: 1.0499013662338257,                 delta: 2.8145651817321777,                     gamma: 0.9402892589569092\nTrue model:  alpha: 1.5,             beta: 1.0,                 delta: 3.0,                     gamma: 1.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nplot_time_series(model_sim_lv, model_lv, data = data_lv[0], title = \"Lotka Volterra: After Fitting\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-28-output-1.png){width=589 height=449}\n:::\n:::\n\n\nNow let's visualize the results using a phase plane plot.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nplot_phase_plane(model_sim_lv, model_lv, data_lv[0], title= \"Phase Plane for Lotka Volterra: After Fitting\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-29-output-1.png){width=589 height=449}\n:::\n:::\n\n\n@fig-lv-fit shows the results of the fit.\n\n![Model fitting visual for the Lotka-Volterra system](./img/lotkavolterra.gif){#fig-lv-fit}\n\n\n### Lorenz Equations\n\nFinally, let's try to fit the Lorenz equations. \n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nmodel_sim_lorenz = Lorenz(sigma=10.0, rho=28.0, beta=8.0/3.0)\nts_data = torch.arange(0, 10.0, 0.05)\ndata_lorenz = create_sim_dataset(model_sim_lorenz, \n                              ts = ts_data, \n                              num_samples=30, \n                              initial_conditions_default=torch.tensor([1.0, 0.0, 0.0]),\n                              sigma_noise=0.01, \n                              sigma_initial_conditions=0.10)\n```\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nlorenz_model = Lorenz(sigma=10.2, rho=28.2, beta=9.0/3) \nfig, ax = plot_time_series(model_sim_lorenz, lorenz_model, data_lorenz[0], title=\"Lorenz Model: Before Fitting\");\n\nax.set_xlim((2,15));\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-31-output-1.png){width=596 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ntrain(lorenz_model, \n      data_lorenz, \n      epochs=300, \n      batch_size=5,\n      method = 'rk4',\n      step_size=0.05,\n      show_every=50,\n      lr = 1e-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLoss at 0: 113.78202438354492\nLoss at 50: 4.346777856349945\nLoss at 100: 2.045162260532379\nLoss at 150: 1.2468274980783463\nLoss at 200: 0.7798126041889191\nLoss at 250: 0.5325850695371628\n```\n:::\n:::\n\n\nLet's look at the results from the fitting procedure. Starting with a full plot of the dynamics.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nfig, ax = plot_time_series(model_sim_lorenz, lorenz_model, data_lorenz[0], title = \"Lorenz Model: After Fitting\"); \n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-33-output-1.png){width=596 height=449}\n:::\n:::\n\n\nLet's zoom in on the bulk of the data and see how the fit looks.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nfig, ax = plot_time_series(model_sim_lorenz, lorenz_model, data_lorenz[0], title = \"Lorenz Model: After Fitting\"); \nax.set_xlim((2,20));\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-34-output-1.png){width=604 height=449}\n:::\n:::\n\n\nYou can see the model is very close to the true model for the data range. Now the phase plane plot.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nplot_phase_plane(model_sim_lorenz, lorenz_model, data_lorenz[0], title = \"Lorenz Model: After Fitting\", time_range=(0,20.0));\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-35-output-1.png){width=596 height=449}\n:::\n:::\n\n\nYou can see that our fitted model performs well for t in [0,17] and then starts to diverge. \n\n# Intro to Neural Differential Equations \n\nThis is great for the situation where we know the form of the equations on the right-hand-side, but what if we don't? Can we use this procedure to discover the model equations? \n\nThis is much too big of a subject to cover in this post (stay tuned), but one of the biggest advantages of moving our differential equations models into the torch framework is that we can mix and match them with artificial neural network layers.\n\nThe simplest thing we can do is to replace the right-hand-side $f(y,t; \\theta)$ with a neural network layer $l_\\theta(y,t)$. These types of equations have been called a neural differential equations and it can be viewed as generalization of a recurrent neural network (citation). \n\nLet's do this for the our simple VDP oscillator system. \n\nLet's remake the simulated data, you will notice that I am creating longer time-series of the data, and more samples. Fitting a neural differential equation takes much more data and more computational power since we have many more parameters that need to be determined. \n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# remake the data \nmodel_sim_vdp = VDP(mu=0.20)\nts_data = torch.linspace(0.0,30.0,100) # longer time series than the custom ode layer\ndata_vdp = create_sim_dataset(model_sim_vdp, \n                              ts = ts_data, \n                              num_samples=30, # more samples than the custom ode layer\n                              sigma_noise=0.1,\n                              initial_conditions_default=torch.tensor([0.50,0.10]))\n```\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nclass NeuralDiffEq(nn.Module):\n    \"\"\" \n    Basic Neural ODE model\n    \"\"\"\n    def __init__(self,\n                 dim: int = 2, # dimension of the state vector\n                 ) -> None:\n        super().__init__()\n        self.ann = nn.Sequential(torch.nn.Linear(dim, 8), \n                                 torch.nn.LeakyReLU(), \n                                 torch.nn.Linear(8, 16), \n                                 torch.nn.LeakyReLU(), \n                                 torch.nn.Linear(16, 32), \n                                 torch.nn.LeakyReLU(), \n                                 torch.nn.Linear(32, dim))\n        \n    def forward(self, t, state):\n        return self.ann(state)\n```\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nmodel_vdp_nde = NeuralDiffEq(dim=2) \nplot_time_series(model_sim_vdp, model_vdp_nde, data_vdp[0], title = \"Neural ODE: Before Fitting\");\n```\n\n::: {.cell-output .cell-output-display}\n![](ode_files/figure-html/cell-38-output-1.png){width=600 height=449}\n:::\n:::\n\n\nYou can see we start very far away for the correct solution, but then again we are injecting much less information into our model. Let's see if we can fit the model to get better results. \n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ntrain(model_vdp_nde, \n      data_vdp, \n      epochs=1500, \n      lr=1e-3, \n      batch_size=5,\n      show_every=100,\n      model_name = \"nde\")\n```\n:::\n\n\nVisualizing the results, we can see that the model is able to fit the data and even extrapolate to the future (although it is not as good or fast as the specified model). @fig-nde-fit shows the results of the model fitting procedure.\n\n![Model fitting for a Neural Differential Equation Model](./img/nde.gif){#fig-nde-fit}\n\nThese models take a long time to train and more data to converge on a good fit. This makes sense since we are both trying to learn the model and the parameters at the same time. \n\n## Conclusions and Wrap-Up \n\nIn this article I have demonstrated how we can use differential equation models within the pytorch ecosytem using the torchdiffeq package. The code from this article is available on <a> github </a> and can be opened directly to google colab for experimentation. You can also install the code from this article using pip (pip install paramfittorchdemo).\n\n\nThis post is an introduction in the future I will be writing more about the following topics:\n\n* How to blend some mechanistic knowledge of the dynamics with deep learning. These have been called <a href=\"https://arxiv.org/abs/2001.04385\"> universal differential equations </a> as they enable us to combine scientific knowledge with deep learning. This basically blends the two approaches together. \n* How to combine differential equation layers with other deep learning layers. \n* Model discovery: Can we recover the actual model equations from data? This uses tools like <a href=\"https://www.pnas.org/doi/10.1073/pnas.1906995116\"> SINDy </a> to extract the model equations from data. \n* MLOps tools for managing the training of these models. This includes tools like <a href=\"https://mlflow.org/\"> MLFlow </a>, <a href=\"https://wandb.ai/home\"> Weights and Biases </a>, and <a href=\"https://pytorch.org/docs/stable/tensorboard.html\"> Tensorboard </a>. \n* Anything else I hear back about from you! \n\nHappy modeling! \n\n",
    "supporting": [
      "ode_files"
    ],
    "filters": [],
    "includes": {}
  }
}